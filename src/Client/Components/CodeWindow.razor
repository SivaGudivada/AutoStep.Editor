@using Monaco.Interop
@using AutoStep.Language
@using AutoStep.Projects
@using AutoStep.Language.Test

@using AutoStep.Editor.Client.Language
@inherits Blazor.Fluxor.Components.FluxorComponent
@implements IDisposable
@inject IDispatcher Dispatcher
@inject IState<AppState> State
@inject MonacoInterop Monaco
@inject Microsoft.Extensions.Logging.ILoggerFactory LogFactory

@{
    var fileViewState = State.Value.FileViews[ViewStateId];
    var fileState = State.Value.Files[fileViewState.FileId];

    var langId = fileState.File is ProjectInteractionFile ? "autostep-interaction" : "autostep";
}

@if (fileState is object && !fileState.IsLoading)
{
    <MonacoEditor Uri="@fileState.FileUri" />
}
else
{
    <MonacoEditor Uri="null" />
}

@code
{
    private static bool hasInitialisedLanguage;

    [Parameter]
    public Guid ViewStateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!hasInitialisedLanguage)
        {
            hasInitialisedLanguage = true;

            Console.WriteLine("Registering Language");

            var project = State.Value.Project;

            await Monaco.RegisterLanguageTokenizer("autostep", ".as", new AutoStepTokenizer(project.Compiler, LogFactory));
            await Monaco.RegisterLanguageTokenizer("autostep-interaction", ".asi", new AutoStepInteractionTokenizer(project.Compiler, LogFactory));
        }

        await base.OnInitializedAsync();

        State.StateChanged += OnStateChanged;
    }

    private void OnStateChanged(object sender, AppState newState)
    {
      StateHasChanged();
    }

    public void Dispose()
    {
        State.StateChanged -= OnStateChanged;
    }
}

