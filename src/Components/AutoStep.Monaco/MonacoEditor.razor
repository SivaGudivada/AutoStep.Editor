@using  AutoStep.Monaco.Interop;
@inject MonacoInterop MonacoInterop
@inject ILogger<MonacoEditor> Logger

<div @ref="monacoContainer" class="monaco-editor-container" />

@code
{
  private ElementReference monacoContainer;
  private CodeEditor editor;
  private Uri lastUri;
  private IEnumerable<MarkerData> currentMarkers;

  [Parameter]
  public Uri Uri { get; set; }
  
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
      if (firstRender)
      {
          Logger.LogDebug("First Render");

          // On the first render, we'll ask our MonacoInterop class to create
          // an editor in the specified container element.
          editor = await MonacoInterop.CreateEditor(monacoContainer);

          Logger.LogDebug("Editor Created");

          // Other state changes may have happened by the time we reach this
          // point, so we'll set the model if there is one.
          if(Uri is object)
          {
              await editor.SetModel(Uri);
          }
      }
  }

  protected override async Task OnParametersSetAsync()
  {
      // Only change the loaded model if the file URI is different.
      if(Uri != lastUri && editor is object)
      {
          Logger.LogDebug("Changing Model");
          lastUri = Uri;

          await editor.SetModel(Uri);
      }
  }
}